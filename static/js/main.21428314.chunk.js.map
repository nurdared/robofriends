{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/Searchbar.jsx","components/Scroll.jsx","components/ErrorBoundry.jsx","containers/App.jsx","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","robot","key","SearchBar","searchChange","type","onChange","placeholder","Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","filteredRobots","filter","toLowerCase","includes","length","fetch","then","response","json","users","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iSAyBeA,G,MAtBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAErB,OACA,kBAAC,WAAD,KACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,gBACb,yBACEC,IAAG,+BAA0BJ,EAA1B,iBACHK,IAAI,YAGR,yBAAKF,UAAU,cACb,4BAAKF,IAEP,yBAAKE,UAAU,eACb,2BAAID,QCMCI,EArBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,kBAAC,WAAD,KACI,6BAASJ,UAAU,aAEfI,EAAOC,KAAI,SAACC,GAAD,OAEH,kBAAC,EAAD,CACIC,IAAKD,EAAMT,GACXA,GAAIS,EAAMT,GACVC,KAAMQ,EAAMR,KACZC,MAAOO,EAAMP,cCG1BS,EAfG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,6BAAST,UAAU,UACjB,yBAAKA,UAAU,oBACb,2BACEU,KAAK,SACLC,SAAUF,EACVG,YAAY,kBAEd,yBAAKZ,UAAU,cCDRa,EARA,SAACC,GACd,OACE,yBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAQ,UACxCH,EAAMI,WCkBCC,G,kBApBb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,UAAU,GAHA,E,+EAOIC,EAAOC,GACvBC,KAAKC,SAAS,CACZJ,UAAU,M,+BAKZ,OAAGG,KAAKJ,MAAMC,SACL,0DACFG,KAAKV,MAAMI,a,GAjBKQ,cCsDZC,E,YA/Cb,aAAe,IAAD,8BACZ,+CAOFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAP1C,EAAKZ,MAAQ,CACXhB,OAAQ,GACR0B,YAAa,IAJH,E,sEAYL,IAAD,EAC0BN,KAAKJ,MAA7BhB,EADF,EACEA,OAAQ0B,EADV,EACUA,YACVG,EAAiB7B,EACtB8B,QAAO,SAAC5B,GACP,OAAOA,EAAMR,KACZqC,cACAC,SAASN,EAAYK,kBAExB,OAAI/B,EAAOiC,OAIT,kBAAC,WAAD,KACE,gCACE,wBAAIrC,UAAU,gBAAd,gBAEF,8BACE,kBAAC,EAAD,CAAWS,aAAiBe,KAAKI,iBACjC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUxB,OAAU6B,QAXrB,yC,0CAmBU,IAAD,OAClBK,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKjB,SAAS,CAAErB,OAAQsC,W,GA7C3BhB,aCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,kB","file":"static/js/main.21428314.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = ({id, name, email}) => {\r\n    \r\n    return (\r\n    <Fragment>\r\n      <div className=\"card\">\r\n        <div className=\"card__avatar\">\r\n          <img\r\n            src={`https://robohash.org/${id}?size=200x200`}\r\n            alt=\"avatar\"\r\n          />\r\n        </div>\r\n        <div className=\"card__name\">\r\n          <h1>{name}</h1>\r\n        </div>\r\n        <div className=\"card__email\">\r\n          <p>{email}</p>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { Fragment } from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <Fragment>\n            <section className=\"container\">\n            {\n                robots.map((robot) =>\n                    (\n                        <Card\n                            key={robot.id}\n                            id={robot.id}\n                            name={robot.name}\n                            email={robot.email}\n                        />\n                    )\n                )\n            }\n            </section>\n        </Fragment>\n    );\n}\n\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBar = ({ searchChange }) => {\r\n  return (\r\n    <section className=\"center\">\r\n      <div className=\"search-container\">\r\n        <input\r\n          type=\"search\"\r\n          onChange={searchChange}\r\n          placeholder=\"Search Robots\"\r\n        />\r\n        <div className=\"search\"></div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return(\r\n    <div style = {{overflowY: 'scroll', height: '800px'}}>\r\n      { props.children }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      hasError: false,\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info){\r\n    this.setState({\r\n      hasError: true,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if(this.state.hasError)\r\n      return <h1>OOOps something went wrong</h1>\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Fragment, Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBar from '../components/Searchbar';\nimport Scroll from '../components/Scroll'\nimport './App.css'\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchField: '',\n    }\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value});\n  };\n\n  render(){\n    const { robots, searchField } = this.state;\n    const filteredRobots = robots\n    .filter((robot) => {\n      return robot.name\n      .toLowerCase()\n      .includes(searchField.toLowerCase());\n    });\n    if(!robots.length){\n      return <h1>Loading</h1>\n    }\n    return (\n      <Fragment>\n        <header>\n          <h1 className=\"title center\">robofriends</h1>\n        </header>\n        <main>\n          <SearchBar searchChange = { this.onSearchChange } />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots= { filteredRobots }/>\n            </ErrorBoundry>\n          </Scroll>\n        </main>\n      </Fragment>\n      );\n  };\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }));\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}